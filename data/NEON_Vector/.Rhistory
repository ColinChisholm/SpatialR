col = palette(viridis(length(States)))
)
# A2. Read in Layers
States <- readOGR("US-Boundary-Layers", "US-State-Boundaries-Census-2014")
plot(States,
col = palette(viridis(length(States)))
)
plot(States,
col = palette(viridis(length(States)))[States$NAME]
)
pal <- length(States)
pal
pal <- viridis(pal)
pal
pal <- viridis(length(States))
plot(States,
col = pal
)
USBoundary <- readOGR("US-Boundary-Layers", "US-Boundary-Dissolved-States")
plot(USBoundary, lwd = 4, add = TRUE)                         #add the boundary to the plot
crs(States)
##### Libraries essential for spatial data ####
# Only thoses used in the script below have the comment cleared off
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
crs(States)
##### Libraries essential for spatial data ####
# Only thoses used in the script below have the comment cleared off
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
# library(raster)       #Raster import and analysis
# library(rts)          #For comparing time rasters in time series
#
# #For Point Cloud Data Analysis.
# library(lidR)         #https://github.com/Jean-Romain/lidR/wiki
#   library(EBImage)      #Needed for several functions in lidR
#
# #Spatial Visualization
library(viridis)      #Color Palletes for cartography / styling -- also useful to ensure visible to color-blind
crs(States)
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
# library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
##### Importing and Exploring Data ####################################################################################
# B1. Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
# Adding some more layers:
Roads <- readOGR("HARV", "HARV_roads")         #Sample data contains line features
Tower <- readOGR("HARV", "HARVtower_UTM18N")   #Sample data contains point feature
# B2. Explore the data
summary(AOI) # summary provides meta-data on the file.
head(Tower)  # displays the first ten entries in the attribute table
# B2. Explore the data
summary(AOI) # summary provides meta-data on the file.
head(Tower)  # displays the first ten entries in the attribute table
head(Roads)  # displays the first ten entries in the attribute table
class(AOI)   # Type of vector data -- in this case a polygon for to be more precise a: SpatialPolygonDataFrame
length(Roads)# How many features are in the data.  As with Other dataframes returns the length of the attribute table
crs(Tower)   # Projection information
extent(AOI)  # Spatial extent of the data: (xmin, xmax, ymin, ymax)
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
# library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
crs(Tower)   # Projection information
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
crs(States)
crs(USBoundary)
# B2. Adding Miss-matching data
Tower <- readOGR("HARV", "HARVtower_UTM18N")
plot(Tower, pch = 19, color = "pink", add = TRUE)
plot(Tower, pch = 19, color = "pink")
plot(Tower, pch = 19, col = "pink")
plot(Tower, pch = 19, col = "red")
plot(States, col = pal)                                       #display
USBoundary <- readOGR("US-Boundary-Layers", "US-Boundary-Dissolved-States")
plot(USBoundary, lwd = 4, add = TRUE)                         #add the boundary to the plot
#The plot above looks nice ... the layers seem to match well.
#Compare crs
crs(States)
crs(USBoundary)
# B2. Adding Miss-matching data
Tower <- readOGR("HARV", "HARVtower_UTM18N")
plot(Tower, pch = 19, col = "red", add = TRUE)
#Although we know that the Tower exists it does not show on this map.
crs(Tower)
##### Transform the Data ##############################################################################################
# Transform Tower to the State CRS
ProjectCRS <- crs(States)
ProjectCRS
Tower <- spTransform(Tower, ProjectCRS)
plot(Tower, pch = 19, col = "red", add = TRUE)
# A2. Bringing in CSV data
dataPoints <- read.csv("HARV/HARV_PlotLocations.csv",
stringsAsFactors = FALSE))        #This Stops R from manipulating the data into factors
##### DATA IMPORT #####################################################################################################
# Scripting generated following the instructions from the NEON turorial
# A1. Set working environment
setwd("E:/workspace/SpatialR/data/NEON_Vector")
# A2. Bringing in CSV data
dataPoints <- read.csv("HARV/HARV_PlotLocations.csv",
stringsAsFactors = FALSE))        #This Stops R from manipulating the data into factors
##### DATA IMPORT #####################################################################################################
# Scripting generated following the instructions from the NEON turorial
# A1. Set working environment
setwd("E:/workspace/SpatialR/data/NEON_Vector")
##### DATA IMPORT #####################################################################################################
# Scripting generated following the instructions from the NEON turorial
# A1. Set working environment
setwd("E:/workspace/SpatialR/SpatialR/data/NEON_Vector")
# A2. Bringing in CSV data
dataPoints <- read.csv("HARV/HARV_PlotLocations.csv",
stringsAsFactors = FALSE))        #This Stops R from manipulating the data into factors
# A2. Bringing in CSV data
dataPoints <- read.csv("HARV/HARV_PlotLocations.csv",
stringsAsFactors = FALSE)        #This Stops R from manipulating the data into factors
head(dataPoints)
head(dataPoints)
length(dataPoints)
str(dataPoints)
Tower <- readOGR("HARV", "HARVtower_UTM18N")
ProjectCRS <- crs(Tower)
##### Convert to a Spatial Object #####################################################################################
# C1. convert data to spatial data
?SpatialPointsDataFrame
str(dataPoints)
##### Convert to a Spatial Object #####################################################################################
# C1. convert data to spatial data
dataPoints <- SpatialPointsDataFrame(dataPoints[,1:2],        #The x y coordinates
dataPoints,              #The Data to assign
proj4string = ProjectCRS #Assign the CRS
)
class(dataPoints)
plot(dataPoints)
extent(dataPoints)
##### Export the Shapefile ############################################################################################
?writeOGR()
##### Export the Shapefile ############################################################################################
writeOGR(dataPoints, "E:/workspace/SpatialR/exports", "PlotData", driver = "ESRI Shapefile")
# A2. Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
Roads <- readOGR(("HARV", "HARV_roads"))
Roads <- readOGR("HARV", "HARV_roads")
Tower <- readOGR("HARV", "HARVtower_UTM18N" )
crs(AOI)
crs(Tower)
crs(Roads)
CHM <- raster("E:/workspace/SpatialR/HARV/CHM")
CHM <- raster("E:/workspace/SpatialR/HARV/CHM.tif")
# Title: Spatial R
# Section: 10 Vector Data
# Purposes: Present Basic Vector Data usage including:
#           - Data Import
#           - Examination of data structure and attributes
#           - Basic Visualization (Lines, Polygons, Points)
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
# library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
# library(rts)          #For comparing time rasters in time series
#
# #For Point Cloud Data Analysis.
# library(lidR)         #https://github.com/Jean-Romain/lidR/wiki
#   library(EBImage)      #Needed for several functions in lidR
#
# #Spatial Visualization
# library(viridis)      #Color Palletes for cartography / styling -- also useful to ensure visible to color-blind
# library(rasterVis)    #Methods for enhanced visualization and interaction with raster data
# library(RColorBrewer) #Creates nice looking color palettes especially for thematic map
##### DATA IMPORT #####################################################################################################
# Scripting generated following the instructions from the NEON turorial
# A1. Set working environment
setwd("E:/workspace/SpatialR/SpatialR/data/NEON_Vector")
# A2. Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
Roads <- readOGR("HARV", "HARV_roads")
Tower <- readOGR("HARV", "HARVtower_UTM18N" )
CHM <- raster("E:/workspace/SpatialR/HARV/CHM.tif")
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
# A2. Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
Roads <- readOGR("HARV", "HARV_roads")
Tower <- readOGR("HARV", "HARVtower_UTM18N" )
CHM <- raster("E:/workspace/SpatialR/HARV/CHM.tif")
CHM <- raster("E:/workspace/SpatialR/HARV/CHM/CHM.tif")
CHM <- raster("E:/workspace/SpatialR/HARV/CHM/HARV_chmCrop.tif")
plot(CHM)
plot(extent(Roads), add = TRUE)
plot(extent(Roads))
##### Crop data to extent #############################################################################################
area(extent(AOI))
##### Crop data to extent #############################################################################################
area(AOI)
##### Crop data to extent #############################################################################################
area(AOI)/10000
x <- SpatialPolygons(extent(Roads))
x <- as(extent(Roads), "SpatialPolygon")
e <- extent(Roads)
x <- as(e, "SpatialPolygon")
x <- as(e, "SpatialPolygons")
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
area <- function(Layer){
e <- extent(Layer)
x <- as(e, "SpacialPolygons")
print(area(x)/10000)
}
# Title: Spatial R
# Section: 21 Raster data: Import and Crop
# Author: Colin Chisholm
# Date:   Oct. 28, 2018
# Purposes: review importing raster data.  Includes croping data.
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
# library(rts)          #For comparing time rasters in time series
#
# #For Point Cloud Data Analysis.
# library(lidR)         #https://github.com/Jean-Romain/lidR/wiki
#   library(EBImage)      #Needed for several functions in lidR
#
# #Spatial Visualization
# library(viridis)      #Color Palletes for cartography / styling -- also useful to ensure visible to color-blind
# library(rasterVis)    #Methods for enhanced visualization and interaction with raster data
# library(RColorBrewer) #Creates nice looking color palettes especially for thematic map
##### DATA IMPORT #####################################################################################################
# Scripting generated following the instructions from the NEON turorial
# A1. Set working environment
setwd("E:/workspace/SpatialR/SpatialR/data/NEON_Vector")
# A2. Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
Roads <- readOGR("HARV", "HARV_roads")
Tower <- readOGR("HARV", "HARVtower_UTM18N" )
SoilPlots <- readOGR("HARV", "")
CHM <- raster("E:/workspace/SpatialR/rasterData/HARV/CHM/HARV_chmCrop.tif")   #Import Raster Data
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
e <- extent(Layer)
x <- as(e, "SpacialPolygons")
print(area(x)/10000)
}
# Title: Spatial R
# Section: 21 Raster data: Import and Crop
# Author: Colin Chisholm
# Date:   Oct. 28, 2018
# Purposes: review importing raster data.  Includes croping data.
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
# library(rts)          #For comparing time rasters in time series
#
# #For Point Cloud Data Analysis.
# library(lidR)         #https://github.com/Jean-Romain/lidR/wiki
#   library(EBImage)      #Needed for several functions in lidR
#
# #Spatial Visualization
# library(viridis)      #Color Palletes for cartography / styling -- also useful to ensure visible to color-blind
# library(rasterVis)    #Methods for enhanced visualization and interaction with raster data
# library(RColorBrewer) #Creates nice looking color palettes especially for thematic map
##### DATA IMPORT #####################################################################################################
# Scripting generated following the instructions from the NEON turorial
# A1. Set working environment
setwd("E:/workspace/SpatialR/SpatialR/data/NEON_Vector")
# A2. Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
Roads <- readOGR("HARV", "HARV_roads")
Tower <- readOGR("HARV", "HARVtower_UTM18N" )
SoilPlots <- readOGR("HARV", "")
CHM <- raster("E:/workspace/SpatialR/rasterData/HARV/CHM/HARV_chmCrop.tif")   #Import Raster Data
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
e <- extent(Layer)
x <- as(e, "SpacialPolygons")
print(area(x)/10000)
}
myArea(Roads)
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
# library(rgeos)        #for topology operations on geometries
# library(geosphere)    #Spherical trigonometry for geographic applications. That is, compute distances and re-lated measures for angular (longitude/latitude) locations
library(raster)       #Raster import and analysis
Layer <- Roads
Layer <- Roads
e <- extent(Layer)
x <- as(e, "SpacialPolygons")
x <- as(e, "SpatialPolygons")
print(area(x)/10000)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
e <- extent(Layer)
x <- as(e, "SpatialPolygons")
print(area(x)/10000)
}
myArea(Roads)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
#e <- extent(Layer)
x <- as(extent(Layer), "SpatialPolygons")
print(area(x)/10000)
}
myArea(Roads)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(area(x)/ha)
}
myArea(Roads)
myArea(Tower)
myArea(AOI)
SoilPlots <- readOGR("HARV", "PlotLocations_HARV")
myArea(SoilPlots)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round(area(x)/ha),1)
}
myArea(Roads)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round(area(x)/ha),2)
}
myArea(Roads)
myArea(AOI)
myArea(SoilPlots)                                             #87.11501 ha.
?round
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round(area(x)/ha), digits = 1)
}
myArea(Roads)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round(area(x)/ha) digits = 1)
}
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round(area(x)/ha), digits = -1)
}
myArea(Roads)
round(567.897,digits = 2)
round(567.897,digits = 4)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round(area(x)/ha), digits = 2)
}
myArea(Roads)
myArea(AOI)
myArea(SoilPlots)                                             #87.11501 ha.
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round((area(x)/ha), digits = 2))
}
myArea(Roads)
##### Crop data to extent #############################################################################################
# Desire is to crop the Raster to the largest extent ... but which one is largest
# Function -- to calculate the area of layer extent (in hectares)
myArea <- function(Layer){
ha <- 10000
x <- as(extent(Layer), "SpatialPolygons")
print(round((area(x)/ha), digits = 1))
}
myArea(Roads)
myArea(AOI)
myArea(SoilPlots)                                             #87.11501 ha.
?crop
# B2. Crop to the extent of interest
CHM_crop <- crop(CHM, SoilPlots)
##### Plot the Data ###################################################################################################
plot(extent(chm_HARV),
lwd=4,col="springgreen",
main="LiDAR CHM - Cropped\nNEON Harvard Forest Field Site",
xlab="easting", ylab="northing")
##### Plot the Data ###################################################################################################
plot(extent(CHM),
lwd=4,col="springgreen",
main="LiDAR CHM - Cropped\nNEON Harvard Forest Field Site",
xlab="easting", ylab="northing")
plot(CHM_crop,
add=TRUE)
plot(SoilPlots)
##### Plot the Data ###################################################################################################
plot(extent(CHM),
lwd=4,col="springgreen",
main="LiDAR CHM - Cropped\nNEON Harvard Forest Field Site",
xlab="easting", ylab="northing")                                    #note the addition of x and y labels
plot(CHM_crop,
add=TRUE)
plot(SoilPlots, add = TRUE)

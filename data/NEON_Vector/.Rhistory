write.csv(z, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",OutName,"csv", sep = "")
write.csv(z, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",OutName,"csv", sep = ""))
write.csv(z, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,"csv", sep = ""))
##### CONVERT and Export Stats #####
RasterStats <- function(SomeRaster){
x <- as.data.frame(SomeRaster)
x <- na.omit(x)
length(x[,1])
y <- x[,1]
unique(sort(y))
length(subset(y, y == 2))
z <- matrix(NA,1,12)
z
for (i in 1:12){
z[,i]<- length(subset(y, y==i ))
}
z
}
DSpeckle.summary <- RasterStats(DSpeckle)
DSpeckle.summary
##### Export files ####
outName <- "Despeckled"
write.csv(z, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,"csv", sep = ""))
##### LOAD DATA #####
#myRaster <- raster("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\ProductiveGroundMask.tif")
#myRaster <- raster("E:/LAS/aleza_tiled/EFI/KMeans12Clusters_6Layers_p95p75p50p25_std_cov.tif")
#myRaster <- raster("E:/GIS/ALRF/Projects/2018/TimberSupply/1806_ProductiveGround/K_means12_Clipped_2_MatureTimberTHLB.tif")
myRaster <- raster("E:/GIS/ALRF/Projects/2018/TimberSupply/1806_ProductiveGround/K-MAT_THLB_v2.tif")
##### Statistics #####
cellStats(myRaster, range)
cellStats(myRaster, max)   #other options:  sum, mean, min, max, sd, 'skew' and 'rms'. 'skew', 'rms' others?
##### Projection and Extent #####
myRaster@crs
myRaster@extent
##### Histogram #####
hist(myRaster, main = "Distrbution of 'myRaster'",
col = "purple",
maxpixels = 10000000)
##### PLOT RASTER #####
plot(myRaster,
main = "K-means 12 clusters from 6 layers")
##### Summary of initial Raster
KMeans.summary <- RasterStats(myRaster)
KMeans.summary
outName <- "KMeans"
write.csv(z, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,"csv", sep = ""))
DSpeckle <- focal(myRaster, w = matrix(1,3,3), fun = median)
DSpeckle <- focal(DSpeckle, w = matrix(1,3,3), fun = median)
DSpeckle.summary <- RasterStats(DSpeckle)
DSpeckle.summary
##### Export files ####
outName <- "Despeckled"
outName <- "KMeans"
write.csv(KMeans.summary, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,"csv", sep = ""))
outName <- "KMeans"
write.csv(KMeans.summary, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,"csv", sep = ""))
##### Export files ####
outName <- "Despeckled"
write.csv(DSpeckle.summary, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,".csv", sep = ""))
# Two Pass Median Filter
DSpeckle <- focal(myRaster, w = matrix(1,3,3), fun = median)
DSpeckle.summary <- RasterStats(DSpeckle)
DSpeckle.summary
##### Export files ####
outName <- "Despeckled"
write.csv(DSpeckle.summary, paste("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\",outName,".csv", sep = ""))
# Two Pass Median Filter
DSpeckle <- focal(myRaster, w = matrix(1,3,3), fun = median, na.rm = TRUE)
DSpeckle.summary <- RasterStats(DSpeckle)
DSpeckle.summary
summary(DSpeckle.summary)
sum(DSpeckle.summary[1,])
##### LOAD DATA #####
#myRaster <- raster("E:\\GIS\\ALRF\\Projects\\2018\\TimberSupply\\1806_ProductiveGround\\ProductiveGroundMask.tif")
#myRaster <- raster("E:/LAS/aleza_tiled/EFI/KMeans12Clusters_6Layers_p95p75p50p25_std_cov.tif")
#myRaster <- raster("E:/GIS/ALRF/Projects/2018/TimberSupply/1806_ProductiveGround/K_means12_Clipped_2_MatureTimberTHLB.tif")
myRaster <- raster("E:/GIS/ALRF/Projects/2018/TimberSupply/1806_ProductiveGround/K-MAT_THLB_v2.tif")
unique(myRaster)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
library(sp)
#List of libraries (Tristan Goodbody)
library(rgdal)
source('E:/workspace/SpatialR/10_VectorData.R')
##### DATA IMPORT ####
# set working environment
setwd("E:/workspace/SpatialR/data/")
##### DATA IMPORT ####
# set working environment
setwd("E:/workspace/SpatialR/data/")
##### DATA IMPORT ####
# set working environment
setwd("E:/workspace/SpatialR/data/NEON_Vector")
##### Libraries essential for spatial data ####
# #List of libraries (thx to Tristan Goodbody for providing me a number of these)
# library(dplyr)        #Data Manipulation
# library(tidyr)        #Data Manupulation
# library(ggplot2)      #Graphing
# library(foreign)      #Import Foriegn to R data types.  Generally used to directly read .dbf files (attributes of Shapefiles)
#
# #spatial data specific libraries
library(sp)           #Essential Spatial Data
library(rgdal)        #GDAL available to R
##### DATA IMPORT ####
# set working environment
setwd("E:/workspace/SpatialR/data/NEON_Vector")
##### DATA IMPORT ####
# Scripting generated following the instructions from the NEON turorial
# set working environment
setwd("E:/workspace/SpatialR/data/NEON_Vector")
# Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV, HarClip_UTMZ18")
# Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV/, HarClip_UTMZ18")
# Import Spatial Vector Data -- here I am Using the NEON example dataset
AOI <- readOGR("HARV", "HarClip_UTMZ18")
#      readOGR("PATH", "LayerFile")                          #For your own data specify the PATH then the LayerName
summary(AOI)
head(AOI)
# Adding some more layers:
Roads <- readOGR("HARV", "HARV_roads")
summary(Roads)
head(Roads)
Tower <- readOGR("HARV", "HARVtower_UTM18N")
class(AOI)
length(Roads)# Returns how many features are in the data.  As with Other dataframes returns the length of the attribute table
crs(Tower)   # Projection information
extent(AOI)  # Spatial extent of the data
AOI          # Calling the variable directly will display the meta-data
Tower        # Calling the variable directly will display the meta-data
View(Tower)
head(as.data.frame(Tower))
head(AOI)    # displays the first ten entries in the attribute table
head(Tower)    # displays the first ten entries in the attribute table
names(Tower)
Roads$TYPE
table(Roads$TYPE)
#Subset a feature based on an attribute
footpaths <- subset(Roads, TYPE == "footpath")
length(footpaths)
head(footpaths)
#Subset a feature based on an attribute here I save it to a new variable
footpaths <- Roads[Roads$TYPE == "footpath"]
footpaths
length(footpaths)
#Subset a feature based on an attribute here I save it to a new variable
footpaths <- Roads[Roads$TYPE == "footpath",]
length(footpaths)
##### Displaying Data #################################################################################################
# C. Plot a single variable
plot(footpaths,                                           #Layer
lwd = 6,                                             #Line Weight
main = "NEON Harvard Forest Field Site \n Footpaths" #Title
)
##### Displaying Data #################################################################################################
# C. Plot a single variable
plot(footpaths,                                           #Layer
col = c("red", "blue")                               #Color of the lines (2 features here and 2 colors)
lwd = 6,                                             #Line Weight
main = "NEON Harvard Forest Field Site \n Footpaths" #Title
)
##### Displaying Data #################################################################################################
# C. Plot a single variable
plot(footpaths,                                           #Layer
col = c("red", "blue"),                              #Color of the lines (2 features here and 2 colors)
lwd = 6,                                             #Line Weight
main = "NEON Harvard Forest Field Site \n Footpaths" #Title
)
# C2. Plot a layer based on the attribute type.  Note the attributes need to be loaded as factors
levels(Roads$TYPE)
Roads$TYPE <- as.factor(Roads$TYPE)
levels(Roads$TYPE)
class <- Roads$TYPE
rm class
rm(class)
class(Roads$TYPE)
levels(Roads$TYPE)
summary(Roads$TYPE)
# Adding some more layers:
Roads <- readOGR("HARV", "HARV_roads")         #Sample data contains line features
summary(Roads$TYPE)
x <- as.data.frame(Roads)
View(x)
View(x)
View(x)
# C2. Plot a layer based on the attribute type.  Note the attributes need to be loaded as factors (this should happen by default)
plot(Roads,
main = "Harvard Roads")
# C2. Plot a layer based on the attribute type.  Note the attributes need to be loaded as factors (this should happen by default)
# syntax for coloring by factor: col = c("colorOne", "colorTwo","colorThree")[object$factor]
plot(Roads,
lwd = 6,
col = c("red", "black", "green", "orange")[Roads$TYPE],
main = "Harvard Roads")
# C2. Plot a layer based on the attribute type.  Note the attributes need to be loaded as factors (this should happen by default)
# syntax for coloring by factor: col = c("colorOne", "colorTwo","colorThree")[object$factor]
class(Roads$TYPE)
plot(Roads,
lwd = 6,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
roadPalette <- c("blue","green","grey","purple")            #Create a color pallete for the roads (this is a new variable)
plot(Roads,
lwd = 6,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
plot(Roads,
lwd = 3,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
levels(Roads$TYPE)
roadWidths  <- c(1,2,3,4)
plot(Roads,
lwd = roadWidths,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
roadPalette <- c("blue","green","grey","purple")            #Create a color pallete for the roads (this is a new variable)
roadWidths  <- c(1,2,3,4)
plot(Roads,
lwd = roadWidths,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
plot(Roads,
lwd = roadWidths,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
roadPalette <- c("blue","green","grey","purple")            #Create a color pallete for the roads (this is a new variable)
roadWidths  <- c(2,4,3,8)
plot(Roads,
lwd = roadWidths,
col = roadPalette[Roads$TYPE],
main = "Harvard Roads")
# C3. Add legend
legend("bottomright",
legend = levels(Roads$TYPE),
fill = roadPalette)
# CHALLENGE  from NEON Tutorial -- Plot the United States
States <- readOGR("US-Boundary-Layers", "US-State-Boundaries-Census-2014")
length(States)
levels(States$region)
levels(States$region)
colStates <- c("purple", "green", "yellow", "red", "grey")
plot(States,
col = colStates,
main = "Regions of the United States")
plot(States,
col = colStates[States$region],
main = "Regions of the United States")
legend("bottom",
legend = levels(States$region),
fill = colStates)
?pch
##### Plot Point Data #################################################################################################
Plots <- readOGR("HARV", "PlotLocations_HARV")
names(Plots)
table(Plots$soilTypeOr)
soilCol <- pallete(terrain.colors(length(levels(Plots$soilTypeOr))))                       #
pallete
pallete?
?pallete
soilCol <- pallette(terrain.colors(length(levels(Plots$soilTypeOr))))                       #
soilCol <- palette(terrain.colors(length(levels(Plots$soilTypeOr))))                       #
soilCol
length(levels(Plots$soilTypeOr))
soilCol <- palette(terrain.colors(x))                       #
x <- length(levels(Plots$soilTypeOr))
soilCol <- palette(terrain.colors(x))                       #
soilCol
soilCol <- palette(terrain.colors(x))                       #palette() specifies the colors based x
symbols <- pch(c(0,6))
plot(Plots,
col = soilCol,
pch = symbols,
main = "Soils Plots at Harvard")
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols[Plots$soilTypeOr],
main = "Soils Plots at Harvard")
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch=c(15,17)[lines_HARV$soilTypeOr],
main = "Soils Plots at Harvard")
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch=c(15,17)[Plots$soilTypeOr],
main = "Soils Plots at Harvard")
soilCol <- palette(default(x))                       #palette() specifies the colors based x
soilCol <- palette(x)                       #palette() specifies the colors based x
soilCol <- palette(terrain.colors(x))                       #palette() specifies the colors based x
symbols <- c(0,6)                                           #This will be the symbol types used google image: "R pch" for a summary of each
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch=c(15,17)[Plots$soilTypeOr],
main = "Soils Plots at Harvard")
soilCol <- palette(rainbow(x))
symbols <- c(0,6)                                           #This will be the symbol types used google image: "R pch" for a summary of each
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch=c(15,17)[Plots$soilTypeOr],
main = "Soils Plots at Harvard")
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = c(0,6)[Plots$soilTypeOr],
main = "Soils Plots at Harvard")
soilCol <- palette(rainbow(x))
symbols <- c(0,6)                                           #This will be the symbol types used google image: "R pch" for a summary of each
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = c(0,6)[Plots$soilTypeOr],
main = "Soils Plots at Harvard")
legend("botomright",
legend = levels(Plots$soilTypeOr),
pch = c(0,6),
fill = soilCol)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = c(0,6),
fill = soilCol)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = c(0,6))
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = c(0,6),
fill = soilCol)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = c(0,6),
line = soilCol)
symbols <- c(0,6)[Plots$soilTypeOr]                         #This will be the symbol types used google image: "R pch" for a summary of each
symbols
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols
col = soilCol
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol
bty = "n"
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n"
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n",
cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol
#bty = "n",
#cex = 1
)
symbols <- c(15,17)[Plots$soilTypeOr]                         #This will be the symbol types used google image: "R pch" for a summary of each
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol
#bty = "n",
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n"
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "N"
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = FALSE
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = FALSE
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = FALSE
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = FALSE
cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = FALSE,
cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n",
cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n",
cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol
#bty = "n",
#cex = 1
)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol)
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol)
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n")
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n",
cex = 1)
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n",                                           #No box around legend
cex = 2                                              #Magnify the text
)
plot(Plots,
col = soilCol[Plots$soilTypeOr],
pch = symbols,
main = "Soils Plots at Harvard")
legend("bottomright",
legend = levels(Plots$soilTypeOr),
pch = symbols,
col = soilCol,
bty = "n",                                           #No box around legend
cex = 2                                              #Magnify the text
)
